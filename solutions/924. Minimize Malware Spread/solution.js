/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
const minMalwareSpread = function (graph, initial) {
  const n = graph.length;
  const groups = new Array(n);

  for (let node = 0; node < n; node++) {
    groups[node] = node;
  }

  const unionFind = node => {
    return groups[node] === node ? node : unionFind(groups[node]);
  };

  const infectedGroups = new Array(n).fill(0);
  const infectedCounts = new Array(n).fill(1);

  initial.sort((a, b) => a - b);

  for (let a = 0; a < n; a++) {
    for (let b = a + 1; b < n; b++) {
      if (!graph[a][b]) continue;
      const groupA = unionFind(a);
      const groupB = unionFind(b);

      if (groupA === groupB) continue;
      groups[groupB] = groupA;
      infectedCounts[groupA] += infectedCounts[groupB];
      infectedCounts[groupB] = 0;
    }
  }

  for (const node of initial) {
    const group = unionFind(node);

    infectedGroups[group] += 1;
  }
  let result = initial[0];
  let maxInfected = 0;

  for (const node of initial) {
    const group = unionFind(node);

    if (infectedGroups[group] === 1 && infectedCounts[group] > maxInfected) {
      result = node;
      maxInfected = infectedCounts[group];
    }
  }
  return result;
};
