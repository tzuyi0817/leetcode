/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
const minMalwareSpread = function (graph, initial) {
  const n = graph.length;
  let result = n;
  let minInfected = Number.MAX_SAFE_INTEGER;

  const getInfectedCount = deleteNode => {
    const visited = Array(n).fill(false);
    let queue = initial.filter(node => node !== deleteNode);
    let count = queue.length;

    for (const node of initial) visited[node] = true;

    while (queue.length) {
      const nextQueue = [];

      for (const node of queue) {
        for (let neighbor = 0; neighbor < n; neighbor++) {
          if (visited[neighbor]) continue;
          const isConnected = graph[node][neighbor];

          if (!isConnected) continue;
          nextQueue.push(neighbor);
          visited[neighbor] = true;
          count += 1;
        }
      }
      queue = nextQueue;
    }
    return count;
  };

  initial.sort((a, b) => a - b);

  for (const node of initial) {
    const count = getInfectedCount(node);

    if (count >= minInfected) continue;
    result = node;
    minInfected = count;
  }
  return result;
};
